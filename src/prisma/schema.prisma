generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int         @id @default(autoincrement())
  chat_id       String      @unique
  model_id      Int?
  referral_link String?
  Messages      Messages[]
  Referrals     Referrals[]

  Transactions      Transactions[]
  UserLimits        UserLimits[]
  UserSubscriptions UserSubscriptions?
}

model SubscriptionLimits {
  id              Int           @id @default(autoincrement())
  subscription_id Int
  model_id        Int
  count           Int
  Models          Models        @relation(fields: [model_id], references: [id])
  Subscriptions   Subscriptions @relation(fields: [subscription_id], references: [id])
}

model Messages {
  id      Int     @id @default(autoincrement())
  chat_id String?
  text    String?
  Users   Users?  @relation(fields: [chat_id], references: [chat_id], onDelete: NoAction, onUpdate: NoAction)
}

model Models {
  id                 Int                  @id @default(autoincrement())
  name               String?
  family             String               @default("chat")
  ReferralBonuses    ReferralBonuses[]
  UserLimits         UserLimits[]
  SubscriptionLimits SubscriptionLimits[]
}

model ReferralBonuses {
  id       Int     @id @default(autoincrement())
  model_id Int?
  count    Int?
  Models   Models? @relation(fields: [model_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Referrals {
  id          Int    @id @default(autoincrement())
  chat_id     String
  referral_id String
  Users       Users  @relation(fields: [chat_id], references: [chat_id], onDelete: NoAction, onUpdate: NoAction)
}

model Subscriptions {
  id                 Int                  @id @default(autoincrement())
  name               String?
  price              Int?
  duration           Int?
  Transactions       Transactions[]
  SubscriptionLimits SubscriptionLimits[]
  UserSubscriptions  UserSubscriptions[]
}

model Transactions {
  id               Int           @id @default(autoincrement())
  chat_id          String?
  createdAt        DateTime?     @db.Date
  status           String?
  subscriptions_id Int
  duration         Int?          @default(10000)
  Users            Users?        @relation(fields: [chat_id], references: [chat_id], onDelete: NoAction, onUpdate: NoAction)
  Subscriptions    Subscriptions @relation(fields: [subscriptions_id], references: [id])
}

model UserLimits {
  id       Int    @id @default(autoincrement())
  model_id Int
  chat_id  String
  request  Int
  limit    Int
  Users    Users  @relation(fields: [chat_id], references: [chat_id])
  Models   Models @relation(fields: [model_id], references: [id])
}

model UserSubscriptions {
  id              Int            @id @default(autoincrement())
  chat_id         String?        @unique
  subscription_id Int?
  dateStart       DateTime?      @db.Date
  dateEnd         DateTime?      @db.Date
  Users           Users?         @relation(fields: [chat_id], references: [chat_id], onDelete: NoAction, onUpdate: NoAction)
  Subscriptions   Subscriptions? @relation(fields: [subscription_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
