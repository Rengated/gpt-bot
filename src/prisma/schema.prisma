generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                 Int                  @id @default(autoincrement())
  chat_id            String               @unique
  model_id           Int?
  referral_link      String?
  Messages           Messages[]
  Referrals          Referrals[]
  Requests           Requests[]
  Transactions       Transactions[]
  User_subscriptions User_subscriptions[]
}

model Limits {
  model_id        Int
  subscription_id Int
  limits          Int?
  Models          Models        @relation(fields: [model_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Subscriptions   Subscriptions @relation(fields: [subscription_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([model_id, subscription_id])
}

model Messages {
  id      Int     @id @default(autoincrement())
  chat_id String?
  text    String?
  Users   Users?  @relation(fields: [chat_id], references: [chat_id], onDelete: NoAction, onUpdate: NoAction)
}

model Models {
  id              Int               @id @default(autoincrement())
  name            String?
  family          String            @default("chat")
  Limits          Limits[]
  ReferralBonuses ReferralBonuses[]
  Requests        Requests[]
}

model ReferralBonuses {
  id       Int     @id @default(autoincrement())
  model_id Int?
  count    Int?
  Models   Models? @relation(fields: [model_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Referrals {
  id          Int    @id @default(autoincrement())
  chat_id     String
  referral_id String
  Users       Users  @relation(fields: [chat_id], references: [chat_id], onDelete: NoAction, onUpdate: NoAction)
}

model Requests {
  id       Int     @id @default(autoincrement())
  chat_id  String?
  count    Int?
  model_id Int?
  Users    Users?  @relation(fields: [chat_id], references: [chat_id], onDelete: NoAction, onUpdate: NoAction)
  Models   Models? @relation(fields: [model_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Subscriptions {
  id                 Int                  @id @default(autoincrement())
  name               String?
  price              Int?
  Limits             Limits[]
  User_subscriptions User_subscriptions[]
}

model Transactions {
  id        Int       @id @default(autoincrement())
  chat_id   String?
  payload   String?
  createdAt DateTime? @db.Date
  status    String?   
  Users     Users?    @relation(fields: [chat_id], references: [chat_id], onDelete: NoAction, onUpdate: NoAction)
}

model User_subscriptions {
  id              Int            @id @default(autoincrement())
  chat_id         String?
  subscription_id Int?
  dateStart       DateTime?      @db.Date
  dateEnd         DateTime?      @db.Date
  Users           Users?         @relation(fields: [chat_id], references: [chat_id], onDelete: NoAction, onUpdate: NoAction)
  Subscriptions   Subscriptions? @relation(fields: [subscription_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
